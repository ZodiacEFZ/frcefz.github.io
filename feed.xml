<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Team 9036 | Zodiac</title>
    <description>Team 9036 Zodiac is an FRC Team set up in May, 2016.</description>
    <link>http://frc.hsefz.org/</link>
    <atom:link href="http://frc.hsefz.org/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 25 Aug 2016 01:57:00 +0000</pubDate>
    <lastBuildDate>Thu, 25 Aug 2016 01:57:00 +0000</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>创建简单指令</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599737-creating-simple-commands&quot;&gt;Creating Simple Commands&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一篇文章讲了一个指令的基本格式，并且提供了使用手柄操纵底盘的指令的例子。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;指令的基本格式&lt;/h2&gt;

&lt;p&gt;要实现一个指令，我们需要重载 WPILib &lt;code&gt;Command&lt;/code&gt; 类的许多方法。大部分方法只需要保留默认就好，不需要重载。部分情况下我们需要编写灵活性较高的指令，可能就会用到这些方法。以下是一个基本指令的组成部分：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// C++ Code
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;MyCommandName.h&quot;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
 * 1.  构造函数：可以传入诸如“目标位置、角度”的参数。为了调试方便，最好在构造时定义
 *     一个指令名。它将会在调试时显示在 SmartDashboard 中。指令同时也要 require
 *     它需要用到的子系统。
 */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyCommandName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elevator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * 2.  Initialize() - 通过该方法建立指令。它会在指令每一次执行 (execute) 之前被
 *     调用。这里应该写入指令的初始化代码。
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * 3.  Execute() - 这个方法被周期性（大约 20 毫秒）调用，并且执行指令需要完成的行为。
 *     比如子系统要移动到某个位置，那么这个函数里就应该不断调用子系统的函数，来达到目
 *     标位置。当然部分情况下也可以在 initialize() 中设置好目标，留空 execute() 函数。
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * 4. 如果指令不再需要执行，返回 true。
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java code&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCommandName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * 1.  构造函数：可以传入诸如“目标位置、角度”的参数。为了调试方便，最好在构造时定义
     *     一个指令名。它将会在调试时显示在 SmartDashboard 中。指令同时也要 require
     *     它需要用到的子系统。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyCommandName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyCommandName&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elevator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * 2.  initialize() - 通过该方法建立指令。它会在指令每一次执行 (execute) 之前被
     *     调用。这里应该写入指令的初始化代码。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * 3.  execute() - 这个方法被周期性（大约 20 毫秒）调用，并且执行指令需要完成的行为。
     *     比如子系统要移动到某个位置，那么这个函数里就应该不断调用子系统的函数，来达到目
     *     标位置。当然部分情况下也可以在 initialize() 中设置好目标，留空 execute() 函数。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * 4. 如果指令不再需要执行，返回 true。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;简单的指令示范&lt;/h2&gt;

&lt;p&gt;这个例子实现了一个可以用手柄 &lt;code&gt;tank drive&lt;/code&gt; 底盘的指令。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// C++ Code
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &quot;DriveWithJoysticks.h&quot;
#include &quot;RobotMap.h&quot;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DriveWithJoysticks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Requires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drivetrain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drivetrain 是底盘子系统的一个对象（实例）
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 指令被运行前执行
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * execute() - 在这个方法里调用子系统 tankDrive 的方法。这个方法需要传递两个从 OI
 * 类中获取到的手柄的速度参数。 OI 抽象了手柄对象，因此可以极大方便改变速度来源。
 * （比如如果我们需要让手柄不要那么敏感，我们可以在 OI 里把速度乘上 0.5。）
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drivetrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetJoystick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
 * isFinished() - 这个方法始终返回 false，这意味着指令永远不会自己要求停止，这样
 * 的话，我们就可以把指令设置为子系统的默认指令，只要子系统不运行其他指令，那么这个
 * 指令就会被持续执行。如果其他指令的执行中断了这个指令，那么这个指令会在其他指令执
 * 行完成以后继续执行。
 */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drivetrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 在其他指令需要使用底盘子系统时中断本指令。
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interrupted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;End&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java Code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DriveWithJoysticks&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DriveWithJoysticks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drivetrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Drivetrain 是底盘子系统的一个对象（实例）&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * execute() - 在这个方法里调用子系统 tankDrive 的方法。这个方法需要传递两个从 OI
     * 类中获取到的手柄的速度参数。 OI 抽象了手柄对象，因此可以极大方便改变速度来源。
     * （比如如果我们需要让手柄不要那么敏感，我们可以在 OI 里把速度乘上 0.5。）
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drivetrain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tankDrive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLeftSpeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRightSpeed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*
     * isFinished() - 这个方法始终返回 false，这意味着指令永远不会自己要求停止，这样
     * 的话，我们就可以把指令设置为子系统的默认指令，只要子系统不运行其他指令，那么这个
     * 指令就会被持续执行。如果其他指令的执行中断了这个指令，那么这个指令会在其他指令执
     * 行完成以后继续执行。
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 23 Aug 2016 15:20:08 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/23/create-simple-command.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/23/create-simple-command.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>RE: 从零开始的编程入门</title>
        <description>&lt;p&gt;由 Zodiac 推出的从零开始的 FRC 机器人入门教程。&lt;/p&gt;

&lt;ul&gt;
  
  
  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Jul 7, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zc的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/07/07/programming-with-wpilib.html&quot;&gt;来自 Xenial 星的召唤 · FRC 机器人编程入门&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Jul 7, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zc的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/07/07/object-oriented-programming.html&quot;&gt;漂亮和丑陋的 Xenial 星人 · Java 面向对象入门&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Jul 8, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zc的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/07/08/command-based-robot.html&quot;&gt;手舞足蹈的 Xenial 星人 · 指令式机器人&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Jul 8, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zc的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/07/08/using-git.html&quot;&gt;Xenial 的代码仓库 · 使用 git&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Jul 24, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zc的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/07/24/networking-with-roborio.html&quot;&gt;和 Xenial 情感交流&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 16, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#zyz的编程干货&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/16/command-group.html&quot;&gt;CommandGroup · 指令组&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;


&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 14:43:55 +0000</pubDate>
        <link>http://frc.hsefz.org/showcase/programming/2016/08/23/zodiac-programming-guide.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/showcase/programming/2016/08/23/zodiac-programming-guide.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>编程</category>
        
        
        <category>showcase</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>PID 子系统</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599736-pidsubsystems-for-built-in-pid-control&quot;&gt;PIDSubsystems for built-in PID control&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们在编程时用到这样一个子系统：来自传感器的返回值直接用来控制电机的速度或位置，那么我们就可以使用 PID 子系统。可能会用到 PID 子系统的例子有：用电位器指定高度的升降装置，用编码器调整速度的射球装置，以及用电位器来确定旋转度数的机械手腕。&lt;/p&gt;

&lt;p&gt;WPILib 中本来就有 &lt;code&gt;PIDController&lt;/code&gt;，但是为了能够方便地在指令式编程中使用它，我们可以使用 &lt;code&gt;PIDSubsystem&lt;/code&gt;。一个 PID 子系统其实就是一个内置了 &lt;code&gt;PIDController&lt;/code&gt; 的子系统，并且提供了可以协调传感器和机械的成员方法。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java code&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usfirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subsystems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;edu.wpi.first.wpilibj.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;edu.wpi.first.wpilibj.command.PIDSubsystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.usfirst.frc.team1.robot.RobotMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wrist&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PIDSubsystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这个子系统继承自 PIDSubsystem&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Victor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RobotMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wristMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AnalogInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RobotMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;wristPot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Wrist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrist&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 构造函数传递子系统名称和在计算输出时会用到的 P I D 三个参数。&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setAbsoluteTolerance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getPIDController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContinuous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initDefaultCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnPIDInput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAverageVoltage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这个函数作为子系统对于传感器参数的反馈。&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;usePIDOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pidWrite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 在这里执行 PID 传感器参数应用在电机上的程序。&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 23 Aug 2016 14:40:36 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/23/PIDSubsystem-for-builtin-PID-control.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/23/PIDSubsystem-for-builtin-PID-control.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>指令式机器人编程</title>
        <description>&lt;p&gt;Zodiac 翻译的 2016 FRC Control System 中 Command-based 相关的文档。&lt;/p&gt;

&lt;ul&gt;
  
  
  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 22, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/22/what-is-command-based-programming.html&quot;&gt;什么是指令式编程&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 23, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/23/creating-a-robot-project.html&quot;&gt;创建机器人项目&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 23, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/23/adding-commands-and-subsystems-to-the-project.html&quot;&gt;向机器人项目中添加指令和子系统&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 23, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/23/simple-subsystems.html&quot;&gt;简单子系统&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 23, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/23/PIDSubsystem-for-builtin-PID-control.html&quot;&gt;PID 子系统&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;

  &lt;li&gt;
    &lt;span class=&quot;post-meta&quot;&gt;
      &lt;span class=&quot;m-r-1&quot;&gt;Aug 23, 2016&lt;/span&gt;
      &lt;small&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#机器人&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#Java&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#C++&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#编程&lt;/span&gt;
      
        &lt;span class=&quot;text-muted&quot;&gt;#翻译&lt;/span&gt;
      
      &lt;/small&gt;
    &lt;/span&gt;
    &lt;h2&gt;
      &lt;a class=&quot;post-link&quot; href=&quot;/programming/2016/08/23/create-simple-command.html&quot;&gt;创建简单指令&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/li&gt;


&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 04:00:36 +0000</pubDate>
        <link>http://frc.hsefz.org/showcase/programming/2016/08/23/a-brief-introduction-to-command-based-robot.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/showcase/programming/2016/08/23/a-brief-introduction-to-command-based-robot.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>编程</category>
        
        
        <category>showcase</category>
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>简单子系统</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599735-simple-subsystems&quot;&gt;Simple Subsystems&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;创建子系统&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java code&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usfirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subsystems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;edu.wpi.first.wpilibj.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;edu.wpi.first.wpilibj.command.Subsystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.usfirst.frc.team1.robot.RobotMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Claw&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subsystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Victor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RobotMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clawMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initDefaultCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;motor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个很简单的控制机械爪的子系统。在这个例子中，机械爪使用一个马达驱动张开或关闭，并且没有使用任何传感器（我们可以用这个例子练习编程，但是请不要在实际中这么设计机械爪）。机械爪张开和关闭的程度是计时实现的。三个方法 &lt;code&gt;open()&lt;/code&gt; &lt;code&gt;close()&lt;/code&gt; &lt;code&gt;stop()&lt;/code&gt; 可以驱动机械爪的马达。请注意，这里没有任何代码可以确认机械爪是否真的张开或关闭了。&lt;code&gt;open()&lt;/code&gt; 方法调用时，机械爪向打开的方向移动。&lt;code&gt;close()&lt;/code&gt; 方法使机械爪往关闭的方向移动。我们可以使用指令来控制机械爪究竟要花多少时间张开关闭。&lt;/p&gt;

&lt;h2&gt;使用指令操纵机械爪&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java code&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;usfirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;team1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;edu.wpi.first.wpilibj.command.Command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.usfirst.frc.team1.robot.Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 *
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenClaw&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OpenClaw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;claw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;claw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTimedOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Robot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;claw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;interrupted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;指令可以帮助我们设置每个子系统操作的时间。多个指令可以使用一个子系统完成多个行为。机械爪就是一个例子。指令可以设置机械爪张开或关闭的时间参数。比如上面的指令就控制了机械爪张开。请注意，我们在这个指令中用 &lt;code&gt;setTimeout&lt;/code&gt; 函数设置了指令的执行时间为 0.9 秒。最后要在 &lt;code&gt;isFinished()&lt;/code&gt; 函数中判断是否到达了指定时间。关于如何使用指令，请参见“使用指令”这篇文章。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 03:40:36 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/23/simple-subsystems.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/23/simple-subsystems.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>向机器人项目中添加指令和子系统</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599734-adding-commands-and-subsystems-to-the-project&quot;&gt;Adding Commands and Subsystems to the project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;指令和子系统都是以类的形式被创建的。WPILib 开发插件内置了指令和子系统的程序模板。我们可以直接添加。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;添加子系统&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/1-9ccf3ad98f5ca61566cea76f930568726062862b2938bc86bee1b32961efe9e7.png&quot; width=&quot;640&quot; height=&quot;224&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;右键点击项目名，并选择 New - Subsystem。&lt;/p&gt;

&lt;h2&gt;命名子系统&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/2-aa272e32c6f31a635a1f540fe87825b0dd3f9ba70edc02d26ee961f1b883c0c5.png&quot; width=&quot;524&quot; height=&quot;431&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;在文本框中填写子系统名称。因为这个名称是程序中的类名，所以请指定一个符合编程语言语法的名称。&lt;/p&gt;

&lt;h2&gt;所有子系统&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/3-1d52473e57a16c3d4d5860b9aab410aaecbda976dd386dd5fd284bcb10427d35.png&quot; width=&quot;312&quot; height=&quot;341&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们可以在 &lt;code&gt;Subsystems&lt;/code&gt; (C++) 或 &lt;code&gt;org.usfirst.frc.teamxxxx.robot.subsystems&lt;/code&gt; (Java) 目录中查看所有新建的子系统。欲了解如何完善一个子系统，请参见 &lt;a href=&quot;/programming/2016/08/23/simple-subsystems.html&quot;&gt;简单子系统&lt;/a&gt; 这篇文章。&lt;/p&gt;

&lt;h2&gt;添加指令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/4-9b12485ddf6d0647b7699674c7be53149196c2964b38c2b24ff297f7c04a7b6d.png&quot; width=&quot;640&quot; height=&quot;191&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/4.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;指令的添加步骤与子系统的添加类似。右键点击项目名，选择 New - Command。&lt;/p&gt;

&lt;h2&gt;命名指令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/5-edd3c805e2be1bb7a3d5a186203a06dad58f8beaec2036695aefa6fe7067a66f.png&quot; width=&quot;524&quot; height=&quot;422&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/5.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Class Name&lt;/code&gt; 中输入指令名。因为这个名称是程序中的类名，所以请指定一个符合编程语言语法的名称。&lt;/p&gt;

&lt;h2&gt;所有指令&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/adding-commands-and-subsystems-to-the-project/6-4e28c24e3a5bbfc47e5ecf1347457a159524ba5c23d69296852008d563d84e6b.png&quot; width=&quot;448&quot; height=&quot;262&quot; alt=&quot;adding-commands-and-subsystems-to-the-project/6.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们可以在 &lt;code&gt;Commands&lt;/code&gt; (C++) 或 &lt;code&gt;org.usfirst.frc.teamxxxx.robot.commands&lt;/code&gt; (Java) 目录中查看所有新建的子系统。欲了解如何完善一个指令，请参见“&lt;a href=&quot;/programming/2016/08/23/create-simple-command.html&quot;&gt;创建简单指令&lt;/a&gt;”这篇文章。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 03:24:19 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/23/adding-commands-and-subsystems-to-the-project.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/23/adding-commands-and-subsystems-to-the-project.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>创建机器人项目</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599733-creating-a-robot-project&quot;&gt;Creating a robot project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;创建项目&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/creating-a-robot-project/1-6288290ebae7d86231fb220c3f6431ba98812c2076958d84b760c5c2f64aa40f.png&quot; width=&quot;640&quot; height=&quot;132&quot; alt=&quot;creating-a-robot-project/1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;右键点击 Project Explorer 中的空白区域，选择 &lt;code&gt;New&lt;/code&gt; - &lt;code&gt;Project...&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;选择项目类型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/creating-a-robot-project/2-fedc1bff39f1db539f2e4d081afa2fb01f4b533e6fdae4e2d4cea8c3d047278b.png&quot; width=&quot;526&quot; height=&quot;409&quot; alt=&quot;creating-a-robot-project/2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;展开 WPILib Robot C++ Development / WPILib Robot Java Development 文件夹，选择合适的项目类型
(Robot C++ Project 或 Robot Java Project)。这里只能看到安装过的项目类型。&lt;/p&gt;

&lt;h2&gt;选择项目骨架&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/creating-a-robot-project/3-a49b157fa7baae3c30747e244f29a0c681f5f76d72715d2ebbee46e0590e3c21.png&quot; width=&quot;534&quot; height=&quot;332&quot; alt=&quot;creating-a-robot-project/3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;在文本框中给项目命名，然后选择 Command-Based Robot 单选框。&lt;/p&gt;

&lt;h2&gt;在 Project Explorer 中浏览项目骨架&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/creating-a-robot-project/4-457f41a80af0cbbaf461d54746d447c6d89f791b292849584e085bf2b9dc531e.png&quot; width=&quot;474&quot; height=&quot;344&quot; alt=&quot;creating-a-robot-project/4.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;注意当前浏览的可能是其他项目。请选择一个目录下有 &lt;code&gt;commands&lt;/code&gt; 和 &lt;code&gt;subsystems&lt;/code&gt; 的项目。&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 03:14:44 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/23/creating-a-robot-project.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/23/creating-a-robot-project.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>什么是指令式编程</title>
        <description>&lt;blockquote class=&quot;blockquote&quot;&gt;&lt;p&gt;原文：&lt;a href=&quot;http://wpilib.screenstepslive.com/s/4485/m/13809/l/599732-what-is-command-based-programming&quot;&gt;What is Command based programming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;WPILib 支持通过“指令式编程”，一种帮助我们更好地管理机器人工程代码的设计模式，来编写机器人程序。机器人程序和一般的视窗程序不同的地方有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;行为按次序执行。比如射出飞盘、提升升降装置、在目标地点放置一个管子等等由许多小动作组合而成的&lt;strong&gt;一系列&lt;/strong&gt;动作。&lt;/li&gt;
&lt;li&gt;一些行为同时发生。比如让升降装置、机械手腕、机械夹&lt;strong&gt;同时&lt;/strong&gt;工作来移动到拾取位置，这相比一个接一个地移动更有效率。&lt;/li&gt;
&lt;li&gt;最好能够单独测试某个机械或者某个行为，提高调试的效率。&lt;/li&gt;
&lt;li&gt;有时在上场前的最后一刻，还需要编写新的自动程序来提高运行效率，因此代码的可扩展性十分重要。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在编写机器人行为时，我们应该避免使用非模块化、非结构化的方法，而应使用指令式编程，因为她（是的！指令式编程在我心中就是如女神般的存在！）支持上述所有特性，使编写复杂的机器人行为更为简单方便。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;指令和子系统&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/1-3a49f64af50103e3d10d52f3029e8a0602fa4b98ea701a1071d1e102bd192f69.png&quot; width=&quot;640&quot; height=&quot;158&quot; alt=&quot;what-is-command-based-programming/1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用 WPILib 的指令式编程编写的程序，最终的工程都是由最基本的两部分组成的：&lt;strong&gt;子系统&lt;/strong&gt;和&lt;strong&gt;指令&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;子系统：定义机器人的某个机械可以执行的功能。它继承于 &lt;code&gt;Subsystem&lt;/code&gt; 类。&lt;/p&gt;

&lt;p&gt;指令：通过子系统中支持的功能，结合成一个机器人的行为。它继承于 &lt;code&gt;Command&lt;/code&gt; 类或 &lt;code&gt;CommandGroup&lt;/code&gt; (指令组) 类。指令会被调度或事件发生时执行。比如手柄按钮被按下、SmartDashboard 中的虚拟按钮被按下。&lt;/p&gt;

&lt;h2&gt;指令是如何被执行的&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/2-cf5393e42f96cf64afc6f8e3ec83b591db42da1067f44dafb9d9ee2e4b7dcc58.png&quot; width=&quot;640&quot; height=&quot;199&quot; alt=&quot;what-is-command-based-programming/2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;指令使得我们可以把操作机器人的一整个步骤分割成一个个小的部分。每个指令都有一个 &lt;code&gt;execute()&lt;/code&gt; (执行) 函数和一个 &lt;code&gt;isFinished()&lt;/code&gt; (是否执行结束) 函数。这些函数在收到 Driver Station 的状态更新后执行，周期大约为 20 毫秒。我们可以组合并依次执行指令。&lt;/p&gt;

&lt;h2&gt;并行&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/3-34598754372e36c8913a762547cefd99f33a43c99677146ad09663670e4ca440.png&quot; width=&quot;640&quot; height=&quot;404&quot; alt=&quot;what-is-command-based-programming/3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;有时我们需要几个行为同时执行来实现指定功能。在先前图中的例子里，可能需要在机械手腕转动的同时提升升降装置。我们可以通过&lt;strong&gt;指令组&lt;/strong&gt;来启动数个并行执行的指令，甚至可以通过指令组来启动数个并行执行的指令组。&lt;/p&gt;

&lt;h2&gt;指令被以何种方式执行 —— 指令调度&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/4-adad6a6c340930857fa36ef5705f2490996a36eefe391affcf7ddfcbc44bb66a.png&quot; width=&quot;477&quot; height=&quot;514&quot; alt=&quot;what-is-command-based-programming/4.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;机器人程序中主要有三种方式调用指令：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;手动调用，直接调用指令的 &lt;code&gt;start()&lt;/code&gt; 函数。（一般在自动阶段使用）&lt;/li&gt;
&lt;li&gt;自动在事件发生时执行。比如在程序中定义的按钮按下、按住等事件。（事件基本上都在 &lt;code&gt;OI&lt;/code&gt; 类里定义，但会由调度器确定执行时机）&lt;/li&gt;
&lt;li&gt;在上一个指令执行完成时。（子系统的默认指令和指令组中的指令）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当机器人程序从 Driver Station 那里获取到了新的数据后，机器人程序的周期函数会被调用（这些函数都是 &lt;code&gt;Periodic&lt;/code&gt; 结尾的）。在指令式机器人程序中，周期函数干的事情就是让调度器根据触发的事件确认是否需要执行新的指令，或者停止一个正在执行的指令。&lt;/p&gt;

&lt;p&gt;当一个指令将要被执行时，调度器会保证没有其他指令在使用这个指令所需要的子系统。如果一个或多个子系统正在被其他指令使用，并且这些正在执行的指令可以被中断，那么正在执行的指令会被中断，新的指令就会被&lt;strong&gt;加入当前正在执行的指令列表&lt;/strong&gt;。如果有正在执行的指令不能被中断，新的指令就无法执行。&lt;/p&gt;

&lt;h2&gt;指令如何被调用 —— 指令的执行&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/5-d43e2f5f0eb1afa2dc986e4ee083f17f8daa1499fed5d39b3a7ae77fe5494fd9.png&quot; width=&quot;198&quot; height=&quot;358&quot; alt=&quot;what-is-command-based-programming/5.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;调度器维护了一个当前正在执行的指令列表，在一个周期内调用每一个正在执行指令的 &lt;code&gt;execute()&lt;/code&gt; 和 &lt;code&gt;isFinished()&lt;/code&gt; 方法。显而易见，这些操作都可以不需要使用多线程多任务技术就能完成，这显著地降低了程序的复杂程度。每一个指令都有一个 &lt;code&gt;execute()&lt;/code&gt; 函数和一个 &lt;code&gt;isFinished()&lt;/code&gt; 函数。 &lt;code&gt;execute()&lt;/code&gt; 函数执行让机器人一步步接近目标的程序； &lt;code&gt;isFinished()&lt;/code&gt; 函数决定程序是否已经达到指令的目标。这两个函数都是不断地被周期性调用的。&lt;/p&gt;

&lt;h2&gt;指令组&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/what-is-command-based-programming/2-cf5393e42f96cf64afc6f8e3ec83b591db42da1067f44dafb9d9ee2e4b7dcc58.png&quot; width=&quot;640&quot; height=&quot;199&quot; alt=&quot;what-is-command-based-programming/2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;复杂的指令是由一个个小的指令组合而成的。比如射击飞盘可能由“瞄准飞盘”、“向‘指令式编程’女神敬礼”、“扣动扳机”等一系列指令组成，一个接一个执行。可能这些一个接一个执行的指令中还有需要并行执行的指令。指令组是一个指令，但不需要自己定义 &lt;code&gt;isFinished()&lt;/code&gt; 和 &lt;code&gt;execute()&lt;/code&gt; 方法，因为它帮助我们接管一系列指令的执行。因此我们可以把许多小的指令组合起来，变成一个巨大的复杂的指令组。这种模块化思想是经常在软件工程中使用到的。每一个小指令都可以被单独测试，最后再测试指令组。指令组的相关教程可以在“创建指令组”这一篇教程中找到。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;（感谢 &lt;a href=&quot;https://github.com/SkyZH&quot;&gt;@SkyZH&lt;/a&gt; &lt;a href=&quot;https://github.com/incrediblink/&quot;&gt;@IncredibLink&lt;/a&gt; 翻译）&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Aug 2016 10:13:22 +0000</pubDate>
        <link>http://frc.hsefz.org/programming/2016/08/22/what-is-command-based-programming.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/programming/2016/08/22/what-is-command-based-programming.html</guid>
        
        <category>机器人</category>
        
        <category>Java</category>
        
        <category>C++</category>
        
        <category>编程</category>
        
        <category>翻译</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>论如何维护 Zodiac 官网</title>
        <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先需要注册一个 &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; 账号。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问 &lt;a href=&quot;https://github.com/ZodiacEFZ/website/&quot;&gt;https://github.com/ZodiacEFZ/website/&lt;/a&gt; ，点击 Fork 把这个项目拷贝到自己的账户下。
&lt;strong&gt;（这之后的操作都是在自己的项目里操作的！）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-1-7e7a232fe8665849d169d146fd8194052496d7f91f591919879cca27771b789f.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-1.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在拷贝后的网站 &lt;code&gt;_posts&lt;/code&gt; 文件夹下点击 &lt;code&gt;Create New File&lt;/code&gt; 创建文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-2-fb05f2821733ecfe8739495522ad298df0d5a98153acb63cbf5b224ea4880042.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-2.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件名设置为 &lt;code&gt;2016-08-04-first-day-training.markdown&lt;/code&gt; (格式为 &lt;code&gt;日期-英文-名&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-3-5c9537bb45badca54a5bca7b1f73c97f42b079449e0a20fa4c62cad4e78ae4e9.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-3.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开头复制文件头    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;创客营第一天&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2016-08-03 15:10:09 +0800&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;news&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;新闻 创客营 日常&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把 &lt;code&gt;date&lt;/code&gt; 改成当前时间，&lt;code&gt;categories&lt;/code&gt; 只能写英文无空格。    &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-4-6626ff3e35766b8db019ef3e49d4095f6ffa9d449af696a7d575e0f3abc190e0.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-4.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空一行直接开始写文章。Markdown 语法相关请参见 &lt;a href=&quot;http://www.jianshu.com/p/q81RER&quot;&gt;http://www.jianshu.com/p/q81RER&lt;/a&gt;
(如果不习惯使用 GitHub 的编辑器，可以在 &lt;a href=&quot;https://stackedit.io&quot;&gt;StackEdit&lt;/a&gt; 上编辑完成后拷贝过来)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-5-8b15a9318c6a1aa5979fe3e71adb5150da5aa67e9970052c9a4bd7a7ec995669.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-5.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 &lt;code&gt;Preview&lt;/code&gt; 可以预览当前文章。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-6-ee25183cca627d7e9844ec4d21bc352ac2a43d87a2adda550644a07fde6f5bd1.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-6.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果需要插入图片，请先新建一个在与文章名字相同的目录的文件 &lt;code&gt;_assets/img/first-day-training/dummy.txt&lt;/code&gt;，再把压缩后的图片上传到 &lt;code&gt;_assets/img/first-day-training&lt;/code&gt; 目录下。文件名不要出现中文字符。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-7-11eca0557aaf2f404993508c6f976d22d99556db47c06e3b4aca0e08499b1f36.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-7.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在文章中引入图片，换行空行后直接插入代码：&lt;br&gt;
&lt;code&gt;&amp;#123;&amp;#37; img first-day-training/test-picture.jpg &amp;#37;&amp;#125;&lt;/code&gt;    &lt;/p&gt;

&lt;p&gt;这里 &lt;code&gt;first-day-training/test-picture.jpg&lt;/code&gt; 是图片相对于 img 目录的位置。注意图片无法直接在 GitHub 上预览文章时显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-8-ed4dc485c31078d6e6b48e1350087c12979da9896a5aa738033cd0b8d24c2950.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-8.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 &lt;code&gt;Commit New File&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-9-6bf7e90cb59d391c3e564c8b44f63472ab26ff5351f2e7e307a2a27be94296d6.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-9.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文章的文字和图片都上传完毕后，点击项目导航栏中的 &lt;code&gt;New Pull Request&lt;/code&gt;，在提交信息中填写这次更改的内容（比如&lt;code&gt;添加了创客营第一天的新闻&lt;/code&gt;），再点击 &lt;code&gt;Create Pull Request&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-10-25839d29306fdc2399ab31eccb121f481d4d764012ba5facaba3a8cb1098c634.png&quot; width=&quot;1412&quot; height=&quot;636&quot; alt=&quot;make-website/website-10.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-11-bf9294be271b98593fddaaba373e7b54551c6bd7eb745dbfde6fbdaf05a17812.png&quot; width=&quot;1412&quot; height=&quot;887&quot; alt=&quot;make-website/website-11.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-12-f0c833591db468ea37dda063e41b1c91b4b50dde6725fdcf1b23588927a87488.png&quot; width=&quot;1412&quot; height=&quot;887&quot; alt=&quot;make-website/website-12.png&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在这里可以看到审核状况 &lt;a href=&quot;https://github.com/ZodiacEFZ/website/pulls&quot;&gt;https://github.com/ZodiacEFZ/website/pulls&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本人审核后即可自动部署到网站上。部署完毕后在 Slack 的 &lt;code&gt;#business&lt;/code&gt; 中会有通知。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://frc.hsefz.org/assets/make-website/website-13-112b65850fc5f004b2040da82b7df04c0bc630408bef23e1ecd0a7b782e74a30.png&quot; width=&quot;1204&quot; height=&quot;649&quot; alt=&quot;make-website/website-13.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;strong&gt;GitHub&lt;/strong&gt; 出现 &lt;code&gt;1 new commit&lt;/code&gt; 表示审核已经通过，大约三分钟后出现 &lt;strong&gt;Travis&lt;/strong&gt; &lt;code&gt;Build #93 (036ff5c) of ZodiacEFZ/website@master by SkyZH passed in 4 min 39 sec&lt;/code&gt; 表示已经将修改同步到网站上。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 19 Aug 2016 05:02:26 +0000</pubDate>
        <link>http://frc.hsefz.org/team/2016/08/19/make-website.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/team/2016/08/19/make-website.html</guid>
        
        <category>队伍</category>
        
        <category>网站</category>
        
        <category>维护</category>
        
        
        <category>team</category>
        
      </item>
    
      <item>
        <title>友情链接 / Friends</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;9046 / 初檬 &lt;a href=&quot;https://truemoe.cn/&quot;&gt;https://truemoe.cn/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;341 / Miss Daisy &lt;a href=&quot;http://www.team341.com/&quot;&gt;http://www.team341.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;5515 / Blue Power Robotics (蓝色动力) &lt;a href=&quot;http://www.team5515.com/&quot;&gt;http://www.team5515.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;9048 / META ROBOTICS &lt;a href=&quot;http://www.metarobotics.org&quot;&gt;http://www.metarobotics.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1595 / The Dragons &lt;a href=&quot;http://www.1595dragons.org/&quot;&gt;http://www.1595dragons.org/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;4001 / Rams Robotics &lt;a href=&quot;http://www.team4001.com/&quot;&gt;http://www.team4001.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 17 Aug 2016 07:12:06 +0000</pubDate>
        <link>http://frc.hsefz.org/team/2016/08/17/friends.html</link>
        <guid isPermaLink="true">http://frc.hsefz.org/team/2016/08/17/friends.html</guid>
        
        <category>队伍</category>
        
        <category>链接</category>
        
        
        <category>team</category>
        
      </item>
    
  </channel>
</rss>
